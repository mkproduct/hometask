/*
=====================================================================================================================
 подключение скрипта {
     1 - для простых script - ов можно исп тег script
     2 - полза отделного файла {
        брааузер хранит этот файл кэше
        блогодаря этому если другие страницы соеденены на этом же скрипт то 
        script не загружается занаова, а берётся с кэше (ускаряем загрузку сайта!)
        
     }

     надо исп либо скрипт внутри тега либо src (внешный src адеквате) {
        <script src="main.js">
            alert('show messege');
        </script>
     }
             
 }
*/






/*
=====================================================================================================================
Строковое переоброзования

    Явное приваивание
    1 - при помощю функции String() {
        
        var value = true;
        var value2 = 10;
        console.log(typeof value, typeof value2);

        value = String(value);
        value2 = String(value2);
        console.log(typeof value, typeof value2);

        false -- > "false";
        null -- > "null"; {

            var n = String(null);
            console.log(n === null);
            
        }
    } 
    
    2 - Не явное приваивание {
        
        var value = 548;
        console.log(typeof value);
        value += '';
        console.log(typeof value);

    }

*/



/*
=====================================================================================================================
Численное переоброзование

    Явное приваивание
    1- С помощю фуекции Number() {
        
        var value = '589';
        console.log(typeof value);
        
        value = Number(value);
        console.log(typeof value);
        
    }

    Не явное приваивание {
        var value = '599';
        value = +value;
        console.log(typeof value);

        value *= 1;
    } 

    
    note {
        any words instead of number-- > NaN
        undefined-- > NaN
        null-- > 0
        true / false-- > 1 / 0
        empty string ''-- > 0

        ex {
            var value = ''
            value = Number(value);
            console.log(value);

        }

    }


*/




/*
=====================================================================================================================
прероброзование в Boolean

    явное переоброзование {
        var value = Boolean('');
        var value = Boolean(1);
        var value = Boolean(0);
        var value = Boolean(null);
        var value = Boolean(undefined);
        console.log(value);
    }

    математические операции тоже дают boolean ответь {
        console.log(5 > 4);
    }



*/









/*
========================================================Операторы============================================================
=====================================================================================================================
=====================================================================================================================

Оператор typeof - возвршает строку с именем типа

исползвание {
    typeof argument
    typeof(argunent)
}

*/



/*
=====================================================================================================================
Унарный / бинарный / операнд


    операнд
    то к чему применяется оператор наз/я операндом {
        3 + 9
    }

    унарный опреатор
    когда оператор применяется к одному опранду {
        var a = 1;
        a = -a;
    }

    бнарный
    Оператор который применяется двум операндам на/я бынпрный опр {
        3 + 9
    }

    ex {
        var a = 5;
        var b = 6;
        var c = a - b;
        c = -c;

        console.log(c);
    }

    note {
        унарный оператором может быт только ( + и - ) {

        var value = '10';
        var value2 = '7'
        console.log( -value + +value2 );
    }


*/





/* 
=====================================================================================================================
Унарный плюс +

    console.log('a' + 'b' + 'c');

    console.log(1 + '1');
    console.log('1' + 1);

    // операции выполняютя слево направо
    console.log(6 + 3 + '5');

    сокрашенная функция Number()
    если операнд не число то опр + переоброзует его к числу {
        var value = '5';
        value = +value;
        console.log(typeof value);

        console.log(+null);
        console.log(+true);
        console.log(10 + +'7');


    }
*/






/*
=====================================================================================================================
приваивание приотритет(3)

    var a, b, c;
    a = b = c = 4 + 1;

===================================
Остаток отделение % {
    console.log(11 % 3);
    console.log(15 % 3);
    console.log(0 % 30);
    console.log(15 % 30);
}

===================================
инкремента / декремента {
    посфексная a++ / префиксная ++a {
        посфексная возращает старое значение
        префиксная возврщает новую
    }

    ex {
        var a = 0;
        var b;

        b = a++;
        console.log(b);

        b = ++a;
        console.log(b);
    }

    note: {
        инк/дек разрешено исп только перемену
        5++ --> error
    }

===================================
сокрашение математическых операторов

note: {
    приоритет сокрашенных опр равно как оператор приваивание 
  
    var n = 2;

    n = n * 3 + 5;
    console.log(n);

    // n *= 3+ 5;
    // console.log(n);
}

*/








/*
=====================================================================================================================
Оператор сравнение

    >  <  >=  <=  ==  !=  {
        console.log(5 > 4);
        console.log(5 < 4);
        console.log(5 <= 4);
        console.log(5 >= 4);
        console.log(5 == 4);
        console.log(5 != 4);
    }

    сравненеи строк {
        console.log('оператор' > 'операнд');
        console.log('Оператор' < 'операнд');
    }

    этим опреатором разрешено переобразование {
        console.log('' < ' ');
        console.log('0' == 0);
    }

    оператор строгого равенство {
        console.log(0 === false);
        console.log(0 !== false);
    }

    note: {
        console.log(null == undefined);
    }

*/





/*
=====================================================================================================================
логические операторы && || !

    оператор || {
        
        console.log(true || true);
        console.log(true || false);
        console.log(false || true);
        console.log(false || false);
        
        note: {
            вычесляет опреандов слево направо
            преробразует ич в логический тип
            если опреанд яв/я true останавливан=ется и воз/т исходное значение операнда
            если все операнды false то воз/т последную значенеи операнда
        }
        ex {
            console.log('' || '1' || 0);
            console.log(null || undefined || NaN);
        }
    }

    ============================
    опреатор && {
        console.log(true && true);
        console.log(true && false);
        console.log(false && true);
        console.log(false && true);
    }

    note: {
        вычесляет опрандов слево направо
        каждый переоброзутся в булевый тип. когда встречается false тутже воз/т его значение
        если все операнды true то воз/т посленую значение операнда 
    }
    ex {
        console.log(1 && 5);
        console.log('1' && 0 && 8);
    }

    ================
    оператор ! (Не){
        переоброзует в булевый тип и воз/т противоположное значение (булевым ответом)
    }

*/







/*
=====================================================================================================================
Условный оператор

    if (5 >= 4) {
        console.log(true);
    } else {
        console.log(false);
    }

    тренарный оператор {
        var value = 5;
        var result = (value == 5) ? 5 : (value == 6) ? 6 : false
        console.log(result);
    }

*/




















































